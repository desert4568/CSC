// BuiltIn.java -- the data structure for function closures

// Class BuiltIn is used for representing the value of built-in functions
// such as +.  Populate the initial environment with
// (name, new BuiltIn(name)) pairs.

// The object-oriented style for implementing built-in functions would be
// to include the Java methods for implementing a Scheme built-in in the
// BuiltIn object.  This could be done by writing one subclass of class
// BuiltIn for each built-in function and implementing the method apply
// appropriately.  This requires a large number of classes, though.
// Another alternative is to program BuiltIn.apply() in a functional
// style by writing a large if-then-else chain that tests the name of
// of the function symbol.

package Tree;

import Parse.Parser;
import Parse.Scanner;

public class BuiltIn extends Node {
    // TO DO: For allowing the built-in functions to access the environment,
    // keep a copy of the Environment here and synchronize it with
    // class Scheme4101.

    // private static Environment globalEnv = null;
    //
    // public static void setGlobalEnv(Environment env) {
    // globalEnv = env;
    // }

    private Node symbol;

    public BuiltIn(Node s) {
        symbol = s;
    }

    public Node getSymbol() {
        return symbol;
    }

    public boolean isProcedure() {
        return true;
    }

    public void print(int n) {
        // there got to be a more efficient way to print n spaces
        for (int i = 0; i < n; i++)
            System.out.print(' ');
        System.out.print("#{Built-in Procedure ");
        if (symbol != null)
            symbol.print(-Math.abs(n));
        System.out.print('}');
        if (n >= 0)
            System.out.println();
    }

    // TO DO: The method apply() should be defined in class Node
    // to report an error. It should be overwritten only in classes
    // BuiltIn and Closure.
    public Node apply(Node args) {
        if (args == null) {
            return null;
        }

        String name = symbol.getName();
        Node car = args.getCar();
        if (car == null || car.isNull()) {
            car = Nil.getInstance();
        }

        Node cdr = args.getCdr();
        if (cdr == null || cdr.isNull()) {
            cdr = Nil.getInstance();
        } else {
            cdr = cdr.getCar();
        }

        if (name.equals("b+")) {
            if (car.isNumber() && cdr.isNumber()) {
                return new IntLit(((IntLit) car).getVal() + ((IntLit) cdr).getVal());
            } else {
                System.err.println("Invalid arguments for b+");
                return new StrLit("");
            }
        } else if (name.equals("b-")) {
            if (car.isNumber() && cdr.isNumber()) {
                return new IntLit(((IntLit) car).getVal() - ((IntLit) cdr).getVal());
            } else {
                System.err.println("Invalid arguments for b-");
                return new StrLit("");
            }
        } else if (name.equals("b*")) {
            if (car.isNumber() && cdr.isNumber()) {
                return new IntLit(((IntLit) car).getVal() * ((IntLit) cdr).getVal());
            } else {
                System.err.print("Invalid arguments for b*");
                return new StrLit("");
            }
        } else if (name.equals("b/")) {
            if (car.isNumber() && cdr.isNumber()) {
                return new IntLit(((IntLit) car).getVal() / ((IntLit) cdr).getVal());
            } else {
                System.err.println("Invalid arguments for b/");
                return new StrLit("");
            }
        } else if (name.equals("b=")) {
            if (car.isNumber() && cdr.isNumber()) {
                return new BooleanLit(((IntLit) car).getVal() == ((IntLit) cdr).getVal());
            } else {
                System.err.println("Invalid arguments for b=");
            }
        } else if (name.equals("b>")) {
            if (car.isNumber() && cdr.isNumber()) {
                return new BooleanLit(((IntLit) car).getVal() > ((IntLit) cdr).getVal());
            } else {
                System.err.println("Invalid arguments for b>");
            }
        } else if (name.equals("b<")) {
            if (car.isNumber() && cdr.isNumber()) {
                return new BooleanLit(((IntLit) car).getVal() < ((IntLit) cdr).getVal());
            } else {
                System.err.println("Invalid arguments for b<");
            }
        } else if (name.equals("car")) {
            if (car.isNull()) {
                return car;
            }
            return car.getCar();
        } else if (name.equals("cdr")) {
            if (car.isNull()) {
                return cdr;
            }
            return cdr.getCdr();
        } else if (name.equals("cons")) {
            return new Cons(car, cdr);
        } else if (name.equals("set-cdr!")) {
            car.setCdr(cdr);
            return car;
        } else if (name.equals("set-car!")) {
            car.setCar(cdr);
            return car;
        } else if (name.equals("symbol?")) {
            return new BooleanLit(car.isSymbol());
        } else if (name.equals("number?")) {
            return new BooleanLit(car.isNumber());
        } else if (name.equals("null?")) {
            return new BooleanLit(car.isNull());
        } else if (name.equals("pair?")) {
            return new BooleanLit(car.isPair());
        } else if (name.equals("eq?")) {
            if (car.isBoolean() && cdr.isBoolean()) {
                return new BooleanLit(((BooleanLit) car).getBoolean() == ((BooleanLit) cdr).getBoolean());
            } else if (car.isNumber() && cdr.isNumber()) {
                return new BooleanLit(((IntLit) car).getVal() == ((IntLit) cdr).getVal());
            } else if (car.isString() && cdr.isString()) {
                return new BooleanLit(((StrLit) car).getStrVal().equals(((StrLit) cdr).getStrVal()));
            } else if (car.isSymbol() && cdr.isSymbol()) {
                return new BooleanLit(car.getName().equals(cdr.getName()));
            } else if (car.isNull() && cdr.isNull()) {
                return new BooleanLit(true);
            } else if (car.isPair() && cdr.isPair()) {
                Node opener = new Cons(car.getCar(), new Cons(cdr.getCar(), Nil.getInstance()));
                Node closer = new Cons(car.getCdr(), new Cons(cdr.getCdr(), Nil.getInstance()));
                return new BooleanLit(
                        ((BooleanLit) apply(opener)).getBoolean() && ((BooleanLit) apply(closer)).getBoolean());
            }
            return new BooleanLit(false);
        } else if (name.equals("procedure?")) {
            return new BooleanLit(car.isProcedure());
        } else if (name.equals("display")) {
            return car;
        } else if (name.equals("newline")) {
            return new StrLit("", false);
        } else if (name.equals("exit") || name.equals("quit")) {
            System.exit(0);
        } else if (name.equals("write")) {
            car.print(0);
            return new StrLit("");
        } else if (name.equals("eval")) {
            return car;
        } else if (name.equals("apply")) {
            return car.apply(cdr);
        } else if (name.equals("read")) {
            Parser isParsingMeOff = new Parser(new Scanner(System.in));
            return isParsingMeOff.parseExp();
        } else {
            car.print(0);
            return Nil.getInstance();
        }
        return new StrLit(">");
    }

    // The easiest way to implement BuiltIn.apply is as an
    // if-then-else chain testing for the different names of
    // the built-in functions. E.g., here's how load could
    // be implemented:

    // if (name.equals("load")) {
    // if (!arg1.isString()) {
    // System.err.println("Error: wrong type of argument");
    // return Nil.getInstance();
    // }
    // String filename = arg1.getStrVal();
    // try {
    // Scanner scanner = new Scanner(new FileInputStream(filename));
    // Parser parser = new Parser(scanner);
    //
    // Node root = parser.parseExp();
    // while (root != null) {
    // root.eval(globalEnv);
    // root = parser.parseExp();
    // }
    // } catch (IOException e) {
    // System.err.println("Could not find file " + filename);
    // }
    // return Nil.getInstance(); // or Unspecific.getInstance();
    // }

    public Node eval(Node t, Environment e) {
        return Nil.getInstance();
    }
}
