// Closure.java -- the data structure for function closures

// Class Closure is used to represent the value of lambda expressions.
// It consists of the lambda expression itself, together with the
// environment in which the lambda expression was evaluated.

// The method apply() takes the environment out of the closure,
// adds a new frame for the function call, defines bindings for the
// parameters with the argument values in the new frame, and evaluates
// the function body.

package Tree;

public class Closure extends Node {
    private Node fun; // a lambda expression
    private Environment env; // the environment in which
                             // the function was defined

    public Closure(Node f, Environment e) {
        fun = f;
        env = e;
    }

    public Node getFun() {
        return fun;
    }

    public Environment getEnv() {
        return env;
    }

    public boolean isProcedure() {
        return true;
    }

    public void print(int n) {
        // there got to be a more efficient way to print n spaces
        for (int i = 0; i < n; i++)
            System.out.print(' ');
        System.out.println("#{Procedure");
        if (fun != null)
            fun.print(Math.abs(n) + 4);
        for (int i = 0; i < Math.abs(n); i++)
            System.out.print(' ');
        System.out.println('}');
    }

    // TO DO: The method apply() should be defined in class Node
    // to report an error. It should be overwritten only in classes
    // BuiltIn and Closure.
    public Node apply(Node args) {
        Environment e = this.getEnv();
        Node notFun = getFun();
        Node car = notFun.getCar();
        notFun = notFun.getCdr().getCar();

        while (args != null && !args.getCar().isNull()) {
            e.define(car.getCar(), args.getCar());
            car = car.getCdr();
            args = args.getCdr();
        }

        return notFun.eval(e);
    }

    public Node eval(Node t, Environment e) {
        return Nil.getInstance();
    }
}

