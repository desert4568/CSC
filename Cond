// Cond -- Parse tree node strategy for printing the special form cond

package Special;

import Tree.Node;
import Tree.BooleanLit;
import Tree.Environment;
import Tree.Nil;
import Print.Printer;

public class Cond extends Special {

    public Cond() {
    }

    public void print(Node t, int n, boolean p) {
        Printer.printCond(t, n, p);
    }

    public Node eval(Node t, Environment e) {
        Node condE = t.getCdr();

        while ((!((BooleanLit) (condE.getCar()).getCar().eval(e)).getBoolean()) && (!condE.isNull())) {
            condE = condE.getCdr();
        }
        if (condE.isNull()) {
            return new Nil();
        } else {
            return (condE.getCar().getCdr().getCar().eval(e));
        }
    }
}
